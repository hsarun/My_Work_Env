? .egress_frames.cpp.swp
? .egress_main.cpp.swp
? .egress_tables.cpp.swp
Index: egress.h
===================================================================
RCS file: /hwcvs/vhdl/pchip/tb/tests/iom/egress/egress.h,v
retrieving revision 1.605.2.14
diff -r1.605.2.14 egress.h
3115a3116,3117
>     EGRESS_MSM_TESTBENCH_TYPE_L2TP_CTRL,
>     EGRESS_MSM_TESTBENCH_TYPE_L2TP_DATA,
3204a3207,3222
>                                      EGRESS_MSM_SESSION_ID(EGRESS_MSM_SESSION * session, bool is_l2tp, UINT32 lcl_sess_id, UINT32 sess_id, UINT32 tunnel_id) :
>                                          session_id_hash_rec_index(0xFFFFFFFF),
>                                          session(session)
>                                          {
>                                          memset(&key, 0, sizeof(key));
>                                          memset(&rec, 0, sizeof(rec));
>                                          memset(&ue_mac, 0, sizeof(ue_mac));
>                                          //rec.session_id = lcl_sess_id;
>                                          //rec.chunk_id = GET_CHUNK_ID(sess_id);
>                                          //rec.key.l2tp_key.tunnel_id = tunnel_id;
>                                          //rec.key.l2tp_key.session_id = sess_id;
> 
>                                          key.l2tp_key.tunnel_id = tunnel_id;
>                                          //key.l2tp_key.session_id = sess_id;
>                                          key.l2tp_key.session_id = lcl_sess_id;
>                                          }
3295c3313
<                                  EGRESS_MSM_SESSION(EGRESS_MSM_MICRONET * mn, UINT16 bundle, UINT16 sid, UINT32 num_sdfs1 = 1, UINT32 num_sdfs2 = 1, bool buffering = false, bool extracting = false, bool extract_ipv6_ctrl = false, bool skip_bb = false, bool extraction_test = false, UINT32 bad_bearers = 0);
---
>                                  EGRESS_MSM_SESSION(EGRESS_MSM_MICRONET * mn, UINT16 bundle, UINT16 sid, UINT32 num_sdfs1 = 1, UINT32 num_sdfs2 = 1, bool buffering = false, bool extracting = false, bool extract_ipv6_ctrl = false, bool skip_bb = false, bool extraction_test = false, UINT32 bad_bearers = 0, bool v_test_l2tp_session = false);
3324a3343
>     void                         set_l2tp_sess() { test_l2tp_session = true; }
3325a3345
>     void                         add_session_l2tp_entry();
3341a3362
>     bool                         test_l2tp_session;
Index: egress_frames.cpp
===================================================================
RCS file: /hwcvs/vhdl/pchip/tb/tests/iom/egress/egress_frames.cpp,v
retrieving revision 1.747.2.23
diff -r1.747.2.23 egress_frames.cpp
1336a1337,1343
>         else if (msm_tb_type == EGRESS_MSM_TESTBENCH_TYPE_L2TP_DATA)
>         {
>             frame->delete_subframe(FR_SEGMENT_UDP_DATA, false);
>             frame->delete_subframe(FR_SEGMENT_L2TP_HDR, false);
>             frame->delete_subframe(FR_SEGMENT_POS_ADDR_CTRL, false);
>             frame->delete_subframe(FR_SEGMENT_PPP_PROTOCOL_ID, false);
>         }
1344c1351
< Frame * make_new_mscp_frame (EGRESS_MSM_SESSION * session, const char * text, int tunnel_encap, TO_MSM_REASON reason, EGRESS_MSM_TESTBENCH_TYPE msm_tb_type, bool gtp_v0, IP_ADDR &addr, UINT32 &tunnel_id, UINT32 &ip_offset, UINT32 &l4_offset, bool &error, bool eom_frame = false, bool pdcp_frame = false, bool from_cpm = false, Frame * payload = NULL, UINT8 * TOS = NULL, bool force_zero_tunnel = false, bool extraction_test_session = false, bool sci_frame = false, bool set_tunnel_sa = false)
---
> Frame * make_new_mscp_frame (EGRESS_MSM_SESSION * session, const char * text, int tunnel_encap, TO_MSM_REASON reason, EGRESS_MSM_TESTBENCH_TYPE msm_tb_type, bool gtp_v0, IP_ADDR &addr, UINT32 &tunnel_id, UINT32 &ip_offset, UINT32 &l4_offset, bool &error, bool eom_frame = false, bool pdcp_frame = false, bool from_cpm = false, Frame * payload = NULL, UINT8 * TOS = NULL, bool force_zero_tunnel = false, bool extraction_test_session = false, bool sci_frame = false, bool set_tunnel_sa = false, UINT32 session_id = 0)
1622a1630,1656
>         else if (msm_tb_type == EGRESS_MSM_TESTBENCH_TYPE_L2TP_DATA)
>             {
>             UDP_HEADER udp = {};
>             udp.ports.dest = UDP_PORT_L2TP;
>             udp.ports.source = UDP_PORT_L2TP;
>             *frame += new UDP_Data(&udp);
> 
>             L2TP_FULL_HEADER l2tp_hdr = {};
>             l2tp_hdr.flags_and_vers.version = L2TP_VERSION;
>             l2tp_hdr.ids.tunnel_id  = tunnel_id;
>             l2tp_hdr.ids.session_id = session_id;
> 
>             *frame += new L2TP_Hdr(&l2tp_hdr);
> 
>             POS_ADDR_AND_CTRL ac = { POS_ADDR_VAL, POS_CTRL_VAL };
>             *frame += new POS_Addr_Ctrl(&ac);
>             *frame += new PPP_Protocol_Id(PPP_PROTOCOL_IPV4);
> 
>             if (encap_ipv4) {
>                 frame->delete_subframe(FR_SEGMENT_IPV4_HDR, false); // only delete first IPv4 header
>                 encap_ipv4 = NULL;
>             }
>             else {
>                 frame->print_frame();
>                 logpf("l2tp-----\n");
>             }
>             }
1648a1683,1687
>     if (msm_tb_type == EGRESS_MSM_TESTBENCH_TYPE_L2TP_DATA)
>     {
>         ip_offset = l4_offset = 0;
>     }
>     logpf("ip_offset %d, l4_offset: %d\n", ip_offset, l4_offset);
2428c2467
<     Frame * frame = make_new_mscp_frame (this, text, tunnel_type, reason, msm_tb_type, gtp_v0, addr, tunnel_id, ip_offset, l4_offset, error, eom_frame, pdcp_frame, from_cpm, payload, &TOS, false, extraction_test_session, sci_frame, twag_handover);
---
>     Frame * frame = make_new_mscp_frame (this, text, tunnel_type, reason, msm_tb_type, gtp_v0, addr, tunnel_id, ip_offset, l4_offset, error, eom_frame, pdcp_frame, from_cpm, payload, &TOS, false, extraction_test_session, sci_frame, twag_handover, /*sess_id.id*/ local_session_id);
2503a2543,2548
>         else if (msm_tb_type == EGRESS_MSM_TESTBENCH_TYPE_L2TP_DATA)
>         {
>             logpf("msm_tb_type == EGRESS_MSM_TESTBENCH_TYPE_L2TP_DATA\n");
>             sw_fabric_header.parm.raw.main.to_msm.sess_ip_offset = 10;
>             logpf("sw_fabric_header.parm.raw.main.to_msm.sess_ip_offset: %d\n", sw_fabric_header.parm.raw.main.to_msm.sess_ip_offset);
>         }
2541a2587,2589
>     if (msm_tb_type == EGRESS_MSM_TESTBENCH_TYPE_L2TP_DATA)
>         sw_fabric_header.parm.raw.main.to_msm.tunnel_id = tunnel_id;
> 
2908a2957,2961
>     }
>     else if (test_l2tp_session)
>     {
>         logpf("Generating L2TP frames\n");
>         generate_frame ("L2TP packet Downlink", true,  TO_MSM_REASON_L2TP_OR_EXT, EGRESS_MSM_TESTBENCH_TYPE_L2TP_DATA, false, MSCP_TUNNEL_NONE);
Index: egress_main.cpp
===================================================================
RCS file: /hwcvs/vhdl/pchip/tb/tests/iom/egress/egress_main.cpp,v
retrieving revision 1.851.2.21
diff -r1.851.2.21 egress_main.cpp
10966,10967c10966,10976
<     
<     
---
> 
>     logpf ("EGRESS: MSM Session L2TP\n");
>     EGRESS_MSM_MICRONET  msm_ipv4_mn_l2tp(msm_addr, 24);
>     //EGRESS_MSM_SESSION msm_sess_l2tp(&msm_ipv4_mn_l2tp, 2, 1, 1, 1, false, false, true, false, false, 0, true);
>     EGRESS_MSM_SESSION msm_sess_l2tp(&msm_ipv4_mn_l2tp, 1, 9, 1, 1, false, false, true, false, false, 0, true);
>     //EGRESS_MSM_SESSION msm_sess_l2tp(&msm_ipv4_mn_l2tp, 0, 0, 1, 0, false, false, true, false, false, 0, true);
>     msm_sess_l2tp.set_l2tp_sess();
>     msm_sess_l2tp.add_session_l2tp_entry();
>     MSM_NEXT_ADDR(msm_addr, 1, 3);
> 
> 
11001a11011,11014
>     logpf("EGRESS - Building L2TP Frames\n");
>     msm_sess_l2tp.build_frames();
>     logpf("EGRESS - Building L2TP Frames - Done\n");
> 
11022,11023d11034
<     check_errors ("MSM good frames", 45);
< #elif defined(NP_ALL_RLDRAMS)
11024a11036,11037
> #elif defined(NP_ALL_RLDRAMS)
>     check_errors ("MSM good frames", 47);
11026c11039
<     check_errors ("MSM good frames", 46);
---
>     check_errors ("MSM good frames", 47);
Index: egress_tables.cpp
===================================================================
RCS file: /hwcvs/vhdl/pchip/tb/tests/iom/egress/egress_tables.cpp,v
retrieving revision 1.637.2.21
diff -r1.637.2.21 egress_tables.cpp
8717c8717
< EGRESS_MSM_SESSION::EGRESS_MSM_SESSION(EGRESS_MSM_MICRONET * mn, UINT16 bundle, UINT16 sid, UINT32 num_sdfs1, UINT32 num_sdfs2, bool buffering, bool extracting, bool extract_ipv6_ctrl, bool skip_bb, bool extraction_test, UINT32 bad_bearers) : 
---
> EGRESS_MSM_SESSION::EGRESS_MSM_SESSION(EGRESS_MSM_MICRONET * mn, UINT16 bundle, UINT16 sid, UINT32 num_sdfs1, UINT32 num_sdfs2, bool buffering, bool extracting, bool extract_ipv6_ctrl, bool skip_bb, bool extraction_test, UINT32 bad_bearers, bool v_test_l2tp_session) : 
8723a8724
>     test_l2tp_session(v_test_l2tp_session),
8876a8878,8900
> void EGRESS_MSM_SESSION::add_session_l2tp_entry()
> {
>     void * hash_entry_ptr;
>     UINT32 tunnel_id = sess_id.id;
>     MSM_TUNNEL_ID temp_tunnel_id = { 0 };
>     temp_tunnel_id.id = tunnel_id;
>     msm_tunnel_id_convert(&temp_tunnel_id, MSM_TUNNEL_ID_id, &temp_tunnel_id, MSM_TUNNEL_ID_composite);
>     temp_tunnel_id.composite.session.direction = 0;
>     msm_tunnel_id_convert(&temp_tunnel_id, MSM_TUNNEL_ID_composite, &temp_tunnel_id, MSM_TUNNEL_ID_id);
>     tunnel_id = temp_tunnel_id.id;
> 
>     logpf("local_session_id: 0x%x, sess_id.id: 0x%x, tunnel_id: 0x%x\n", local_session_id, sess_id.id, tunnel_id);
>     // Add L2TP entry for this session
>     msm_session_id_hash_entry = new EGRESS_MSM_SESSION_ID(this, true, local_session_id, sess_id.id, tunnel_id);
>     hash_entry_ptr = hash_EGRESS_MSM_SESSION_ID->add_entry(&msm_session_id_hash_entry->rec, &msm_session_id_hash_entry->key, 0, NULL, msm_session_id_hash_entry, 0);
> 
> #if 0
>     UINT8   raw[MAX((T_AENG_STAT_ENTRY68__BITS+7)/8, SPLIT_COUNTER__BYTES)] = {};
>     *(UINT64 *)raw = 0;
>     MSM_SESSION_ID_HASH_INDEX this_hash_index = hash_EGRESS_MSM_SESSION_ID->get_hash_table_index(hash_entry_ptr);
>     write_raw_table_entries  (0, raw, &EGRESS_MSM_AP_ID_SWAP_TABLE__PARMS_PTRS[0], this_hash_index, 1, 0);
> #endif
> }
8905c8929,8930
<         imsi_index = egress_next_imsi_index++;
---
>         if (!test_l2tp_session)
>             imsi_index = egress_next_imsi_index++;
