#.bashrc.local 07/13/00 mbs
#
# This script is invoked automatically by the example .bashrc
#
# It is intended that you modify this file and put customized things here
# so that the group can share one common .bashrc file.
#

# Because Windows thinks my user name is "Mike Shoemaker", change it, and
# update CVSROOT.
#%%%export USER=mbs
#export CVSROOT=:pserver:$USER@justtryme:f:\\swdev\\cvsrep
#%%%export CVSROOT=$(echo ${CVSROOT} | sed -e "s/:[^:@]*@/:${USER}@/")


# Turn on vi-style command line editing.
# If you prefer EMACS-style editing, use -o emacs
set -o vi

#
# If I'm not at work, then use REF_DIR from local drive
#
#if [ "$HOSTNAME" != "MBSPC" ]
#then
#    export REF_DIR=/cvs/panos
#fi

unset noclobber

#
# Generic aliases
#
alias cda='cd $a'
alias cdb='cd $b'
alias cdc='cd $c'
alias cdd='cd $d'
alias cde='cd $e'
alias cdp='cd $p'
alias cdt='cd $t'
alias copy=cp
alias del=rm
alias ren=mv
alias seta='set a=$PWD'
alias setb='set b=$PWD'
alias setc='set c=$PWD'
alias setd='set d=$PWD'

#unalias mv
#unalias rm


#
# For building tornado things on x86 using Cygwin tools
#
alias ar386=ar
alias as386=as
alias cc386=gcc
alias ld386=ld
alias nm386=nm
alias ranlib386=ranlib
alias size386=size

#
# Shortcuts/Aliases for panos
#
export p=/cvs/panos
export e=$p/wind/target/config/ev64120
export t=$WIND_BASE/target/h

#
# Do a 'make sys' from the top level. Save all output in proj.err
#
alias mksys='(cd $p ; make sys 2>&1 | tee $p/proj.err)'

#alias tgt='cd /cvs/panos/bin/mips-galileo-vxworks ; tgtsvr.exe 192.168.1.169 -n 192.168.1.169 -V -c C:/vxworks/vxWorks'

#
# Make the files writable in the rapidlogic tree to enable using the GUI
# builder tool.
# 
alias rapidedit='cd $p/rapidlogic ; cvs edit panos.ccp panos.rcp panos.wcp rc_options.h rcc_cli.c rcc_cli.h rcc_handlers.c rcc_handlers.h'


export EMAIL_ADDR=Arun.Srinivasa@alcatel-lucent.com
#source /usr/local/timostools/git-dts

export GIT_CO_USE_WORKTREES=1

#
# CVS things
#
export VHDLUSERNAME=arunsr
export VHDLROOT=":pserver:$VHDLUSERNAME@172.22.0.10:/hwcvs"

#
# VHDL environment things
#
export HW_SYNCED=/hwdev/synced
export OSTYPE=linux
export OS=Linux
export PERL=/usr
export PATH=".:/hwdev/hwmisc/apps/modeltech/6.1g/linux_x86_64:$PATH"

function vhdl() {
    export MY_PROJECT=$HOME/ws/$1/vhdl
    export PERL5LIB=$MY_PROJECT/common/scripts/lib
    export PANOS=$HOME/ws/$1/panos 
    DO_ALIAS=1
    . ${MY_PROJECT}/common/scripts/unix/setup.bash
    #caecfg
    #. ${MY_PROJECT}/common/scripts/unix/caecfg_bash
    cd $MY_PROJECT
}

export MODEL_TECH=/hwdev/hwmisc/apps/modeltech/6.1g/linux_x86_64/modeltech
export MGLS_LICENSE_FILE=3100@bkeyserver:1717@sls4m9.stgl.sel.alcatel.de:1717@sls1ki.stgl.sel.alcatel.de:1717@slsc5c.stgl.sel.alcatel.de

#function run_suite() {
#        if [ $# -eq 1 ]; then
#            suiteName=$1
#            if [ $UK_STYLE = 1 ]; then
#                ws=$MY_PROJECT
#                wsName=`basename $MY_PROJECT`
#            else
#                ws=$(expr "$PWD" : "\(/.*\(panos\|vhdl[^/]*\)\)")
#                if [ $OSTYPE = 'linux' ]; then 
#                    wsName=$(expr "$PWD" : "^$HOME\/ws\/\([^\/]*\)")
#                else
#                    wsName=$(expr "$ws" : "\/\(.*\)")
#                fi
#            fi 
#            if [ -z "$wsName" ]; then
#                echo "ERROR: Unable to determine workspace from current directory: $PWD"
#                exit
#            fi
#        else
#            wsName=$1
#            suiteName=$2
#            if [ $OSTYPE = 'linux' ]; then
#                ws=$HOME/ws/$wsName/vhdl
#            else
#                ws=/$wsName/vhdl
#            fi
#        fi
#        $ws/pchip/scripts/testbench_scripts/run_suite.sh $wsName $ws/pchip/scripts/testbench_scripts/testbench_suites/$suiteName.testsuite
#    }

function run_suite() {
        echo $#
        if [ $# -eq 1 ]; then
            suiteName=$1
            echo "Suite-Name: $1"
            if [ $UK_STYLE = 1 ]; then
                ws=$MY_PROJECT
                wsName=`basename $MY_PROJECT`
            else
                ws=$(expr "$PWD" : "\(/.*\(panos\|vhdl[^/]*\)\)")
                if [ $OSTYPE = 'linux' ]; then 
                    wsName=$(expr "$PWD" : "^$HOME\/ws\/\([^\/]*\)")
                else
                    wsName=$(expr "$ws" : "\/\(.*\)")
                fi
            fi 
            if [ -z "$wsName" ]; then
                echo "ERROR: Unable to determine workspace from current directory: $PWD"
                exit
            fi
        else
            wsName=$1
            suiteName=$2
            if [ $OSTYPE = 'linux' ]; then
                ws=$HOME/ws/$wsName/vhdl
            else
                ws=/$wsName/vhdl
            fi
        fi
        echo "ws: $ws"
        echo "wsName: $wsName"
        echo "suiteName: $suiteName"
        $ws/pchip/scripts/testbench_scripts/run_suite.sh $wsName $ws/pchip/scripts/testbench_scripts/testbench_suites/$suiteName.testsuite
    }

function run_v1_hw_suite() {
        echo $#
        if [ $# -eq 0 ]; then
            suiteName='hw'
            if [ $UK_STYLE = 1 ]; then
                ws=$MY_PROJECT
                wsName=`basename $MY_PROJECT`
            else
                ws=$(expr "$PWD" : "\(/.*\(panos\|vhdl[^/]*\)\)")
                if [ $OSTYPE = 'linux' ]; then 
                    wsName=$(expr "$PWD" : "^$HOME\/ws\/\([^\/]*\)")
                else
                    wsName=$(expr "$ws" : "\/\(.*\)")
                fi
            fi 
            if [ -z "$wsName" ]; then
                echo "ERROR: Unable to determine workspace from current directory: $PWD"
                exit
            fi
        elif [ $# -eq 1 ]; then
            suiteName=$1
            echo "Suite-Name: $1"
            if [ $UK_STYLE = 1 ]; then
                ws=$MY_PROJECT
                wsName=`basename $MY_PROJECT`
            else
                ws=$(expr "$PWD" : "\(/.*\(panos\|vhdl[^/]*\)\)")
                if [ $OSTYPE = 'linux' ]; then 
                    wsName=$(expr "$PWD" : "^$HOME\/ws\/\([^\/]*\)")
                else
                    wsName=$(expr "$ws" : "\/\(.*\)")
                fi
            fi 
            if [ -z "$wsName" ]; then
                echo "ERROR: Unable to determine workspace from current directory: $PWD"
                exit
            fi
        else
            wsName=$1
            suiteName=$2
            if [ $OSTYPE = 'linux' ]; then
                ws=$HOME/ws/$wsName/vhdl
            else
                ws=/$wsName/vhdl
            fi
        fi
        echo "ws: $ws"
        echo "wsName: $wsName"
        echo "suiteName: $suiteName"
        echo "Running v1 Test-bench-cases" > ~/ws/testbench_results/$wsName-$suiteName
        npchip
        echo "egress" >> ~/ws/testbench_results/$wsName-$suiteName
        gop -S egress
        echo "lava_egress" >> ~/ws/testbench_results/$wsName-$suiteName
        gop -S lava_egress
        echo "ingress" >> ~/ws/testbench_results/$wsName-$suiteName
        gop -S ingress
        echo "lava_ingress" >> ~/ws/testbench_results/$wsName-$suiteName
        gop -S lava_ingress
        echo "lava_msm_ingress" >> ~/ws/testbench_results/$wsName-$suiteName
        gop -S lava_msm_ingress
        echo "lava_msm_egress" >> ~/ws/testbench_results/$wsName-$suiteName
        gop -S lava_msm_egress
        echo "pumice_msm_ingress" >> ~/ws/testbench_results/$wsName-$suiteName
        gop -S pumice_msm_ingress
        echo "pumice_msm_egress" >> ~/ws/testbench_results/$wsName-$suiteName
        gop -S pumice_msm_egress
        echo "All Done" >> ~/ws/testbench_results/$wsName-$suiteName
    }

function run_v3_hw_suite() {
        echo $#
        if [ $# -eq 1 ]; then
            suiteName=$1
            echo "Suite-Name: $1"
            if [ $UK_STYLE = 1 ]; then
                ws=$MY_PROJECT
                wsName=`basename $MY_PROJECT`
            else
                ws=$(expr "$PWD" : "\(/.*\(panos\|vhdl[^/]*\)\)")
                if [ $OSTYPE = 'linux' ]; then 
                    wsName=$(expr "$PWD" : "^$HOME\/ws\/\([^\/]*\)")
                else
                    wsName=$(expr "$ws" : "\/\(.*\)")
                fi
            fi 
            if [ -z "$wsName" ]; then
                echo "ERROR: Unable to determine workspace from current directory: $PWD"
                exit
            fi
        else
            wsName=$1
            suiteName=$2
            if [ $OSTYPE = 'linux' ]; then
                ws=$HOME/ws/$wsName/vhdl
            else
                ws=/$wsName/vhdl
            fi
        fi
        echo "ws: $ws"
        echo "wsName: $wsName"
        echo "suiteName: $suiteName"
        echo "Running v3 Test-bench-cases" > ~/ws/testbench_results/$wsName-$suiteName
        np3chip
        echo "egress" >> ~/ws/testbench_results/$wsName-$suiteName
        gop -S egress
        echo "lava_egress" >> ~/ws/testbench_results/$wsName-$suiteName
        gop -S lava_egress
        echo "ingress" >> ~/ws/testbench_results/$wsName-$suiteName
        gop -S ingress
        echo "lava_ingress" >> ~/ws/testbench_results/$wsName-$suiteName
        gop -S lava_ingress
        echo "pumice_msm_ingress" >> ~/ws/testbench_results/$wsName-$suiteName
        gop -S pumice_msm_ingress
        echo "pumice_msm_egress" >> ~/ws/testbench_results/$wsName-$suiteName
        gop -S pumice_msm_egress
        echo "All Done" >> ~/ws/testbench_results/$wsName-$suiteName
    }

function run_hw_suite() {
        echo $#
        if [ $# -eq 0 ]; then
            suiteName="hw"
            echo "PWD=$PWD"
            if [ $UK_STYLE = 1 ]; then
                ws=$MY_PROJECT
                wsName=`basename $MY_PROJECT`
            else
                ws=$(expr "$PWD" : "\(/.*\(panos\|vhdl[^/]*\)\)")
                if [ $OSTYPE = 'linux' ]; then 
                    wsName=$(expr "$PWD" : "^$HOME\/ws\/\([^\/]*\)")
                else
                    wsName=$(expr "$ws" : "\/\(.*\)")
                fi
            fi 
            if [ -z "$wsName" ]; then
                echo "ERROR: Unable to determine workspace from current directory: $PWD"
#                exit
            fi
        fi
        if [ $# -eq 1 ]; then
            suiteName=$1
            echo "Suite-Name: $1"
            if [ $UK_STYLE = 1 ]; then
                ws=$MY_PROJECT
                wsName=`basename $MY_PROJECT`
            else
                ws=$(expr "$PWD" : "\(/.*\(panos\|vhdl[^/]*\)\)")
                if [ $OSTYPE = 'linux' ]; then 
                    wsName=$(expr "$PWD" : "^$HOME\/ws\/\([^\/]*\)")
                else
                    wsName=$(expr "$ws" : "\/\(.*\)")
                fi
            fi 
            if [ -z "$wsName" ]; then
                echo "ERROR: Unable to determine workspace from current directory: $PWD"
%                exit
            fi
        else
            wsName=$1
            suiteName=$2
            if [ $OSTYPE = 'linux' ]; then
                ws=$HOME/ws/$wsName/vhdl
            else
                ws=/$wsName/vhdl
            fi
        fi
        echo "ws: $ws"
        echo "wsName: $wsName"
        echo "suiteName: $suiteName"
    #    run_v1_hw_suite();
    #    run_v3_hw_suite();
    }


i386 () { cd bin/7xxx-i386/
          cp iom.tim i386-iom.tim
          cp cpm.tim i386-cpm.tim
          cp boot.tim i386-boot.tim
          cp both.tim i386-both.tim
          cp isa-aa.tim i386-isa-aa.tim
          scp i3*.tim $1@$1.mv.usa.alcatel.com:/home/$1/images
          cd ../.. ;}
i386n () { cd bin/7xxx-i386/
          cp iom.tim i386-iom.tim
          cp cpm.tim i386-cpm.tim
          cp boot.tim i386-boot.tim
          cp both.tim i386-both.tim
          cp isa-aa.tim i386-isa-aa.tim
          scp i3*.tim $1@$1.us.alcatel-lucent.com:/home/$1/images
          cd ../.. ;}
i386perfImageGet () { make/distws.sh -get "bin/7xxx-i386,*.qcow2"
          make/distws.sh -get "bin/vm/7xxx-i386,*.qcow2"
          make/distws.sh -get "bin/7xxx-i386,*.tim"
          make/distws.sh -get "bin/7xxx-i386,*.bin"
          make/distws.sh -get "bin/vm/7xx-i386,*.tim"
          make/distws.sh -get "bin/vm/7xx-i386,*.bin" ; }
i386perf () { cd bin/7xxx-i386/
          cp iom.tim i386-iom.tim
          cp cpm.tim i386-cpm.tim
          cp boot.tim i386-boot.tim
          cp both.tim i386-both.tim
          cp isa-aa.tim i386-isa-aa.tim
          cp vmcontainer.qcow2 i386-vmcontainer.qcow2
          cp vxrom.bin i386-vxrom.bin
          scp i3* $1@$1.us.alcatel-lucent.com:/home/$1/images
          #scp vxrom.bin $1@$1.us.alcatel-lucent.com:/home/$1/images
          cd ../..
          scp bin/vm/7xxx-i386/* $1@$1.us.alcatel-lucent.com:/home/$1/images
          }
i386np () { cd bin/7xxx-i386/
          cp iom.tim i386-iom.tim
          cp cpm.tim i386-cpm.tim
          cp boot.tim i386-boot.tim
          cp both.tim i386-both.tim
          cp isa-aa.tim i386-isa-aa.tim
          scp i3*.tim $1@$1.ih.lucent.com:/home/$1/images
          cd ../.. ;}
hops () { cd bin/7xxx-hops/
          scp *.tim $1@$1.us.alcatel-lucent.com:/home/$1/images
          cd ../7xxx-chile/
          scp isa-aa.tim $1@$1.us.alcatel-lucent.com:/home/$1/images
          cd ../.. ;}
hopsn () { cd bin/7xxx-hops/
          scp *.tim $1@$1.us.alcatel-lucent.com:/home/$1/images
          cd ../7xxx-chile/
          scp isa-aa.tim $1@$1.us.alcatel-lucent.com:/home/$1/images
          cd ../.. ;}


hopsnp () { cd bin/7xxx-hops/
          scp *.tim $1@$1.ih.lucent.com:/home/$1/images
          cd ../7xxx-chile/
          scp isa-aa.tim $1@$1.ih.lucent.com:/home/$1/images
          cd ../.. ;}

hopsnpcfg () { cd bin/7xxx-hops/
          scp *.tim $1@$1.us.alcatel-lucent.com:/home/$1/images
          cd ../7xxx-chile/
          scp isa-aa.tim $1@$1.us.alcatel-lucent.com:/home/$1/images
          cd ../test/
          scp setup_cli.cfg $1@$1.us.alcatel-lucent.com:/home/$1/images/
          scp teardown_cli.cfg $1@$1.us.alcatel-lucent.com:/home/$1/images/
          cd ../.. ; }

queen () { cd bin/7xxx-i386/
           cp iom.tim i386-iom.tim
           cp cpm.tim i386-cpm.tim
           cp boot.tim i386-boot.tim
           cp both.tim i386-both.tim
           cp isa-aa.tim i386-isa-aa.tim
           scp i3* arunsr@queen2.mv.usa.alcatel.com:/home/arunsr/$1
           cd ../.. ;}

queenperf () { cd bin/7xxx-i386/
           cp iom.tim i386-iom.tim
           cp cpm.tim i386-cpm.tim
           cp boot.tim i386-boot.tim
           cp both.tim i386-both.tim
           cp isa-aa.tim i386-isa-aa.tim
           cp vmcontainer.qcow2 i386-vmcontainer.qcow2
           scp i3* arunsr@queen2.mv.usa.alcatel.com:/home/arunsr/$1
           scp vxrom.bin arunsr@queen2.mv.usa.alcatel.com:/home/arunsr/$1
           cd ../..
           scp bin/vm/7xxx-i386/* arunsr@queen2.mv.usa.alcatel.com:/home/arunsr/$1;
           }

queenhops () { cd bin/7xxx-hops/
          scp *.tim arunsr@queen2.mv.usa.alcatel.com:/home/arunsr/$1
          cd ../7xxx-chile/
          scp isa-aa.tim arunsr@queen2.mv.usa.alcatel.com:/home/arunsr/$1
          cd ../.. ;}


# $1: Test Bed Name
# $2: Reason
regrv2submit () {
    regress -testbed $1 -priority P0  -subTopology ismMgB -nobuild -reason $2 -runLevel quick -runSuite mgQuick mgCli;
}

# $1: Test Bed Name
# $2: Reason
regrv2expresssubmit () {
    regress -testbed $1 -priority P0  -subTopology ismMgB -nobuild -reason $2 -runLevel express -runSuite mgExpress;
}

# $1: Test Bed Name
# $2: Reason
regrv3submit () {
    regress -testbed $1 -priority P0  -subTopology ismMgV3 -nobuild -reason $2 -runLevel quick -runSuite mgQuick mgCli;
}

# $1: Test Bed Name
# $2: Reason
regrv3expresssubmit () {
    regress -testbed $1 -priority P0  -subTopology ismMgV3 -nobuild -reason $2 -runLevel express -runSuite mgExpress;
}

# $1: Test Bed Name
# $2: Reason
regrvfpsubmit () {
    regress -subTopology vfp -testbed $1 -runLevel express -reason $2 -nobuild;
}

# $1: Test Bed Name
# $2: Reason
regrsubmit() {
    regrv2submit $1  $2;
    regrv3submit $1 $2;
    regrvfpsubmit $1 $2;
}

# $1: Test Bed Name
# $2: Reason
regrv2_ver0imgsubmit () {
    regress -testbed $1 -priority P0  -subTopology ismMgB -useimages 7750mg/0.0/latest -reason $2 -runLevel quick -runSuite mgQuick mgCli;
}

# $1: Test Bed Name
# $2: Reason
regrv3_ver0submit () {
    regress -testbed $1 -priority P0  -subTopology ismMgV3 -useimages 7750mg/0.0/latest -reason $2 -runLevel quick -runSuite mgQuick mgCli;
}

# $1: Test Bed Name
# $2: Reason
regrvfp_ver0submit () {
    regress -subTopology vfp -testbed $1 -runLevel express -reason $2 -useimages 7750mg/0.0/latest;
}

# $1: Test Bed Name
# $2: Reason
# $3: Topology -- It can be either: ismMgB or ismMgV3
regrv2v3latimgsubmit () {
    regress -testbed $1 -priority P0  -subTopology $3 -useimages 7750mg/0.0/latest -reason $2 -runLevel quick -runSuite mgQuick mgCli;
}

# $1: Test Bed Name
# $2: Reason
regrvfp_ver0submit () {
    regress -subTopology vfp -testbed $1 -runLevel express -reason $2 -useimages 7750mg/0.0/latest;
}

# $1: Reason
dregrv2submit () {
    dregress -v2 -reason $1 -pkg basic;
}

# $1: Reason
dregrv3submit () {
    dregress -v3 -reason $1 -pkg basic;
}

# $1: Reason
dregrvfpsubmit () {
    #dregress -vfp -reason $1 -pkg express;
    dregress -vfp -reason $1 -pkg basic;
}

# $1: Reason
dregrsubmit () {
    dregrv2submit $1;
    dregrv3submit $1;
    dregrvfpsubmit $1;
}

